package agents.sellers;

import java.util.Arrays;
import java.util.List;
import java.util.Random;

public class SellerAuctionListingFrequency {
	private static final Random rand = new Random();

	/**
	 * This returns on average, a value of 5.539 
	 * @return
	 */
	protected static int numberOfAuctions() {
		// cumulative distribution for the frequency of number of auctions submitted by users over 60 days
		// e.g. 0.480 submit one auction
		List<Double> cumulativeProb = Arrays.asList(
				0.47998363,0.635426743,0.716422353,0.767430612,0.799873502,0.825321825,0.844928938,0.860666716,0.872944416,0.883771114,0.892551529,0.90021579,0.907247563,0.912939951,
				0.919041595,0.923766649,0.9277476,0.931616936,0.935411861,0.938723119,0.942145993,0.944750353,0.947875586,0.950665972,0.952972691,0.955205,0.956953642,0.95896272,
				0.960822978,0.962236774,0.964097031,0.965622442,0.966850212,0.968412828,0.969752214,0.971091599,0.972728626,0.974254037,0.975109755,0.97630032,0.977416474,0.978421013,
				0.979202322,0.980095245,0.981025374,0.981881092,0.982625195,0.983369298,0.984299427,0.98496912,0.985973659,0.986717762,0.98749907,0.988094352,0.988429199,0.988950071,
				0.989508148,0.989991815,0.990326661,0.990661508,0.990921944,0.991145174,0.991591636,0.991666047,0.991963688,0.992261329,0.99241015,0.992521765,0.992707791,0.992893817,
				0.993005432,0.993079842,0.993340278,0.993526304,0.993823945,0.994084381,0.994121586,0.994158792,0.994195997,0.994344817,0.994456433,0.994642459,0.994791279,0.994828484,
				0.994977305,0.99508892,0.995237741,0.995460972,0.995535382,0.995609792,0.995721408,0.995795818,0.996056254,0.996093459,0.99616787,0.99624228,0.996391101,0.996465511,
				0.996651537,0.996688742,0.996725947,0.996837562,0.996911973,0.997023588,0.997023588,0.997097998,0.997172409,0.997209614,0.997246819,0.997284024,0.997321229,0.997321229,
				0.99739564,0.997432845,0.99747005,0.99754446,0.99754446,0.997581665,0.997656076,0.997656076,0.997730486,0.997804896,0.997842101,0.997842101,0.997842101,0.997879306,
				0.997879306,0.997879306,0.997916512,0.997953717,0.997953717,0.997953717,0.997990922,0.997990922,0.998028127,0.998028127,0.998065332,0.998102537,0.998139743,0.998139743,
				0.998176948,0.998176948,0.998214153,0.998214153,0.998251358,0.998362973,0.998362973,0.998362973,0.998362973,0.998437384,0.998437384,0.998437384,0.998437384,0.998437384,
				0.998511794,0.998511794,0.998548999,0.998623409,0.998660615,0.99869782,0.998735025,0.998809435,0.998809435,0.998809435,0.998809435,0.998809435,0.998809435,0.998809435,
				0.99884664,0.99884664,0.99884664,0.99884664,0.99884664,0.99884664,0.998883846,0.998883846,0.998883846,0.998883846,0.998883846,0.998921051,0.998921051,0.998921051,
				0.998958256,0.998958256,0.998958256,0.998958256,0.998995461,0.999032666,0.999032666,0.999032666,0.999069871,0.999069871,0.999069871,0.999069871,0.999069871,0.999069871,
				0.999069871,0.999144282,0.999144282,0.999144282,0.999144282,0.999144282,0.999144282,0.999181487,0.999181487,0.999181487,0.999181487,0.999181487,0.999218692,0.999218692,
				0.999255897,0.999293102,0.999293102,0.999293102,0.999293102,0.999293102,0.999293102,0.999293102,0.999293102,0.999293102,0.999293102,0.999293102,0.999293102,0.999293102,
				0.999293102,0.999330307,0.999330307,0.999330307,0.999330307,0.999330307,0.999367512,0.999404718,0.999404718,0.999404718,0.999441923,0.999441923,0.999441923,0.999441923,
				0.999441923,0.999441923,0.999441923,0.999441923,0.999479128,0.999479128,0.999479128,0.999516333,0.999516333,0.999516333,0.999516333,0.999590743,0.999590743,0.999590743,
				0.999590743,0.999590743,0.999590743,0.999590743,0.999590743,0.999590743,0.999590743,0.999590743,0.999590743,0.999590743,0.999590743,0.999590743,0.999590743,0.999590743,
				0.999590743,0.999590743,0.999590743,0.999590743,0.999627949,0.999627949,0.999627949,0.999627949,0.999627949,0.999665154);
		
		double r = rand.nextDouble();
		for (int numAuctions = 0; numAuctions < cumulativeProb.size(); numAuctions++) {
			if (r < cumulativeProb.get(numAuctions))
				return numAuctions + 1;
		}
		return cumulativeProb.size() + 1;
	}
	
	public static void main(String[] args) {
		int count = 0;
		for (int i = 0; i < 10000; i++) {
			if (SellerAuctionListingFrequency.numberOfAuctions() == 1)
				count++;
		}
		System.out.println(count);
	}
}
